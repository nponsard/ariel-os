[package]
name = "ariel-os"
version = "0.2.0"
license.workspace = true
edition.workspace = true

# This should be the ArielÂ OS MSRV.
rust-version = "1.85"

[package.metadata.release]
# We're using this crate to mangle our workspace level `CHANGELOG.md`.
# Apply these using `cargo +nightly release replace -p ariel-os [-x]`.
pre-release-replacements = [
  { file = "../../CHANGELOG.md", search = "\\(#(\\d+)\\)", replace = "([#$1](https://github.com/ariel-os/ariel-os/pull/$1))" },
  { file = "../../CHANGELOG.md", search = "Unreleased", replace = "{{version}}" },
  { file = "../../CHANGELOG.md", search = "\\.\\.\\.HEAD", replace = "...{{tag_name}}", exactly = 1 },
  { file = "../../CHANGELOG.md", search = "ReleaseDate", replace = "{{date}}" },
  { file = "../../CHANGELOG.md", search = "<!-- next-header -->", replace = "<!-- next-header -->\n\n## [Unreleased] - ReleaseDate", exactly = 1 },
  { file = "../../CHANGELOG.md", search = "<!-- next-url -->", replace = "<!-- next-url -->\n[Unreleased]: https://github.com/ariel-os/ariel-os/compare/{{tag_name}}...HEAD", exactly = 1 },
]

[lints]
workspace = true

[dependencies]
document-features = { workspace = true }
linkme = { workspace = true }
ariel-os-bench = { workspace = true, optional = true }
ariel-os-boards = { path = "../ariel-os-boards" }
ariel-os-buildinfo = { workspace = true }
ariel-os-coap = { path = "../ariel-os-coap", optional = true }
ariel-os-debug = { workspace = true }
ariel-os-embassy = { path = "../ariel-os-embassy" }
ariel-os-identity = { workspace = true }
ariel-os-macros = { path = "../ariel-os-macros" }
ariel-os-power = { path = "../ariel-os-power" }
ariel-os-random = { workspace = true, optional = true }
ariel-os-rt = { path = "../ariel-os-rt" }
ariel-os-storage = { workspace = true, optional = true }
ariel-os-threads = { path = "../ariel-os-threads", optional = true }
ariel-os-utils = { workspace = true }
static_cell = { workspace = true }

[features]
default = ["ariel-os-rt/_panic-handler"]

#! ## System functionality
## Enables a global system allocator.
alloc = ["ariel-os-rt/alloc"]
## Enables GPIO interrupt support.
external-interrupts = ["ariel-os-embassy/external-interrupts"]
# Enables storage support.
storage = ["dep:ariel-os-storage", "ariel-os-embassy/storage"]
# Enables threading support, see the [`macro@thread`] attribute macro.
threading = [
  "dep:ariel-os-threads",
  "ariel-os-rt/threading",
  "ariel-os-embassy/threading",
]
## Enables the internal executor's timer queue, required for timer support.
time = ["ariel-os-embassy/time"]
# Enables the [`random`] module.
random = ["dep:ariel-os-random", "ariel-os-embassy/random"]
## Enables a cryptographically secure random number generator in the [`random`] module.
csprng = ["dep:ariel-os-random", "ariel-os-random?/csprng"]
# Enables seeding the random number generator from hardware.
hwrng = ["ariel-os-embassy/hwrng"]

#! ## Network protocols and configuration
## Enables support for TCP.
tcp = ["ariel-os-embassy/tcp"]
## Enables support for UDP.
udp = ["ariel-os-embassy/udp"]
## Enables support for DNS.
dns = ["ariel-os-embassy/dns"]
## Enables support for mDNS.
mdns = ["ariel-os-embassy/mdns"]
## Enables support for [CoAP](https://ariel-os.github.io/ariel-os/dev/docs/book/tooling/coap.html).
coap = ["dep:ariel-os-coap", "random"]
## Enables applications to set up CoAP server handlers.
## See [`coap::coap_run()`].
coap-server = ["coap", "ariel-os-coap/coap-server"]
# Plain forwarded features that are not documented as features but just as laze
# modules, because while those here work without any extra help from laze, most
# later ones will likely need some build system help.
coap-server-config-storage = ["ariel-os-coap/coap-server-config-storage"]
coap-server-config-demokeys = ["ariel-os-coap/coap-server-config-demokeys"]
coap-server-config-unprotected = [
  "ariel-os-coap/coap-server-config-unprotected",
]
# Forwarded features that are not even user selected, but influenced by the
# build system that knows who provides an abort and assert handler.
liboscore-provide-abort = ["ariel-os-coap/liboscore-provide-abort"]
liboscore-provide-assert = ["ariel-os-coap/liboscore-provide-assert"]
## Selects static IP configuration.
network-config-static = ["ariel-os-embassy/network-config-static"]

#! ## Serial communication
## Enables I2C support.
i2c = ["ariel-os-embassy/i2c"]
## Enables SPI support.
spi = ["ariel-os-embassy/spi"]
## Enables USB support.
usb = ["ariel-os-embassy/usb"]
## Enables USB HID support.
usb-hid = ["ariel-os-embassy/usb-hid"]

#! ## System configuration
#! The [`macro@config`] attribute macro allows to provide configuration for
#! specific system functionality.
#! The features below need to be enabled so that the provided custom
#! configuration is taken into account.
## Enables custom network configuration.
network-config-override = ["ariel-os-embassy/network-config-override"]
## Enables custom USB configuration.
override-usb-config = ["ariel-os-embassy/override-usb-config"]

#! ## Multicore functionality
## Enables support for core affinities (restricting threads to specific cores).
core-affinity = ["multi-core", "ariel-os-threads?/core-affinity"]
# Exactly one of the features below must be enabled at once.
# Selection of these should be done through laze configuration.
# Enables one single core, even if the hardware provides multiple cores.
single-core = ["ariel-os-rt/single-core"]
# Enables support for SMP.
multi-core = ["ariel-os-threads?/multi-core", "ariel-os-rt/multi-core"]

# ## Network type selection
# At most one of the features below can be enabled at once.
# These features are normally automatically selected by
# [laze](https://github.com/kaspar030/laze) based on what the board supports,
# and don't need to be selected manually.
# Selects Ethernet over USB (USB CDC-NCM).
usb-ethernet = ["ariel-os-embassy/usb-ethernet"]
# Selects Wi-Fi (with the CYW43 chip).
wifi-cyw43 = ["ariel-os-embassy/wifi-cyw43"]
# Selects Wi-Fi (on ESP chips).
wifi-esp = ["ariel-os-embassy/wifi-esp"]
# Selects STM32 Ethernet
eth-stm32 = ["ariel-os-embassy/eth-stm32"]

#! ## Development and debugging
# Enables the debug console, required to use
# [`println!`](ariel_os_debug::println).
debug-console = ["ariel-os-rt/debug-console"]
# Enables logging support through `defmt`, see [`debug::log`].
defmt = [
  "ariel-os-coap?/defmt",
  "ariel-os-debug/defmt",
  "ariel-os-embassy/defmt",
  "ariel-os-threads?/defmt",
  "ariel-os-bench?/defmt",
]
# Enables logging support through `log`, see [`debug::log`].
log = ["ariel-os-debug/log", "ariel-os-embassy/log"]
## Enables benchmarking facilities.
bench = ["dep:ariel-os-bench"]
# Prints panic messages on the debug console.
panic-printing = ["ariel-os-rt/panic-printing"]
## Allows to have no boards selected, useful to run target-independent tooling.
no-boards = ["ariel-os-boards/no-boards", "executor-none"]

# These are selected by laze
debug-uart = ["ariel-os-debug/uart", "ariel-os-embassy/debug-uart"]
rtt-target = ["ariel-os-debug/rtt-target"]
esp-println = ["ariel-os-debug/esp-println"]
semihosting = ["ariel-os-debug/semihosting"]

net = ["ariel-os-embassy/net"]

# ## Executor type selection for the (autostarted) main executor
# Exactly one of the features below must be enabled at once.
# Enables the interrupt executor.
executor-interrupt = [
  "ariel-os-embassy/executor-interrupt",
  "ariel-os-rt/executor-interrupt",
]
# Enables the single thread-mode executor.
executor-single-thread = ["ariel-os-embassy/executor-single-thread"]
# Enables the ariel-os-threading thread executor.
executor-thread = ["ariel-os-embassy/executor-thread", "threading"]
# Don't start any executor automatically.
# *Used for internal testing only.*
executor-none = ["ariel-os-embassy/executor-none"]

# features needed for `cargo test`
_test = ["i2c", "no-boards", "spi", "external-interrupts"]
