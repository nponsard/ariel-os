name: Build

on:
  pull_request:
    branches:
      - main
  merge_group:
  schedule:
    # run every morning at 3:17am
    - cron: '17 3 * * *'

concurrency:
  group: ${{ github.head_ref || github.run_id }}-build
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # clang-sys and thus bindgen is sensitive to multiple installed versions
      # around, see eg. https://github.com/rust-lang/rust-bindgen/issues/2682
      #
      # CLANG_PATH should be set to the most recent clang installed, no matter
      # what /usr/bin/clang is, for some parts of the code will go for the
      # newest standard library. It may also need to be aligned with the clang
      # version which Xtensa provides.
      CLANG_PATH: /usr/bin/clang-18

    strategy:
      fail-fast: false
      matrix:
        partition: ["1/20", "2/20", "3/20", "4/20", "5/20", "6/20", "7/20", "8/20", "9/20", "10/20", "11/20", "12/20", "13/20", "14/20", "15/20", "16/20", "17/20", "18/20", "19/20", "20/20"]

    steps:
      - name: Free up space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL &

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Get git tree hash
        id: get-tree-hash
        run: |
            git rev-parse HEAD^{tree} > .tree-hash
            echo "hash=$(cat .tree-hash)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: result-cache
        with:
          path: .tree-hash
          key: success-${{ steps.get-tree-hash.outputs.hash }}-${{ matrix.partition }}-${{ github.event_name == 'schedule' && 'full' || 'limited' }}

      - name: Run sccache-cache
        if: steps.result-cache.outputs.cache-hit != 'true'
        uses: mozilla-actions/sccache-action@v0.0.8

      - id: get_toolchain
        if: steps.result-cache.outputs.cache-hit != 'true'
        run: echo "toolchain=$(scripts/rust-toolchain.sh)" >> $GITHUB_OUTPUT

      - name: Install nightly toolchain
        if: steps.result-cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.get_toolchain.outputs.toolchain }}
          targets: riscv32imc-unknown-none-elf,riscv32imac-unknown-none-elf,thumbv6m-none-eabi,thumbv7m-none-eabi,thumbv7em-none-eabi,thumbv8m.main-none-eabi
          # rust-src: Used for -Zbuild-std.
          # rustfmt: Used by bindgen for liboscore
          components: rust-src, rustfmt

      - name: Install stable toolchain
        if: steps.result-cache.outputs.cache-hit != 'true'
        # configure MSRV here:
        uses: dtolnay/rust-toolchain@1.85
        with:
          targets: riscv32imc-unknown-none-elf,riscv32imac-unknown-none-elf,thumbv6m-none-eabi,thumbv7m-none-eabi,thumbv7em-none-eabi,thumbv8m.main-none-eabi
          # rust-src: Used for -Zbuild-std.
          # rustfmt: Used by bindgen for liboscore
          components: rust-src, rustfmt

      - name: Install Rust for Xtensa
        if: steps.result-cache.outputs.cache-hit != 'true'
        # No tag yet after https://github.com/esp-rs/xtensa-toolchain/pull/38 (will probably be @v1.5.5)
        uses: esp-rs/xtensa-toolchain@main
        with:
          version: "1.85.0.0"
          buildtargets: esp32s3
          override: false
          export: false

      - name: rust cache
        if: steps.result-cache.outputs.cache-hit != 'true'
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.partition }}"

      - name: Install laze
        uses: taiki-e/install-action@v2
        if: steps.result-cache.outputs.cache-hit != 'true'
        with:
          tool: laze@0.1

      - name: "installing prerequisites"
        if: steps.result-cache.outputs.cache-hit != 'true'
        run: sudo apt-get install ninja-build gcc-arm-none-eabi gcc-riscv64-unknown-elf

      - name: "Show installed versions"
        run: |
          set -x
          set +e
          env
          llvm-config --libs
          cargo version
          laze --version
          arm-none-eabi-gcc --version
          clang --version
          rustup show
          cat ${ESPUP_EXPORT_FILE:-~/export-esp.sh}
          (. ${ESPUP_EXPORT_FILE:-~/export-esp.sh}; xtensa-esp32s3-elf-gcc --version)
          set +x
          # Check which alternative versions are installed
          IFS=":"; for p in $PATH; do ls $p/llvm-config-* $p/clang-* 2>/dev/null; done
          sha256sum /usr/lib/llvm-*/lib/clang/*/include/stdint.h
          true

      - name: "limit build unless nightly build"
        if: github.event_name != 'schedule' && steps.result-cache.outputs.cache-hit != 'true'
        run: |
          echo "LAZE_BUILDERS=ai-c3,espressif-esp32-devkitc,espressif-esp32-c6-devkitc-1,espressif-esp32-s3-devkitc-1,bbc-microbit-v2,nrf52840dk,nrf5340dk,rpi-pico,rpi-pico-w,st-nucleo-c031c6,st-nucleo-h755zi-q,st-nucleo-wb55,st-b-l475e-iot01a" >> "$GITHUB_ENV"

      - name: "ariel-os compilation test (default toolchain)"
        if: steps.result-cache.outputs.cache-hit != 'true'
        run: |
          sccache --start-server || true # work around https://github.com/ninja-build/ninja/issues/2052

          CONFIG_WIFI_NETWORK='test' CONFIG_WIFI_PASSWORD='password' laze build --global --partition hash:${{ matrix.partition }}

      # cleanup previous build artifacts. do in background (no need to wait).
      - name: "cleanup stable build artifacts"
        if: github.event_name == 'schedule' && steps.result-cache.outputs.cache-hit != 'true'
        run: |
          mv build build.tmp && rm -rf build.tmp &

      # nightly build, nightly toolchain
      # (disabling xtensa here as it gets built by the default toolchain build above)
      - name: "ariel-os compilation test (nightly toolchain)"
        if: github.event_name == 'schedule' && steps.result-cache.outputs.cache-hit != 'true'
        run: |
          sccache --start-server || true # work around https://github.com/ninja-build/ninja/issues/2052

          CONFIG_WIFI_NETWORK='test' CONFIG_WIFI_PASSWORD='password' laze build --global --partition hash:${{ matrix.partition }} --select nightly --disable xtensa

  build-success:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Final Results
    needs: [build]
    steps:
      - run: |
          result="${{ needs.build.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi

      - name: Report nightly failure
        if: failure() && github.event_name == 'schedule' && github.repository == 'ariel-os/ariel-os'
        uses: s3krit/matrix-message-action@v0.0.3
        with:
          room_id: ${{ secrets.MATRIX_ROOM_ID }}
          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          message: "The nightly build [failed](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})."
          server: "matrix.org"
