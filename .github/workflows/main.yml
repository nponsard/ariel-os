name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:

concurrency:
  group: ${{ github.head_ref || github.run_id }}-main
  cancel-in-progress: true

jobs:
  cargo-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - id: get_toolchain
        run: echo "toolchain=$(scripts/rust-toolchain.sh)" >> $GITHUB_OUTPUT

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.get_toolchain.outputs.toolchain }}

      - name: Install laze
        uses: taiki-e/install-action@e43a5023a747770bfcb71ae048541a681714b951 # v2
        with:
          tool: laze@0.1

      - name: Install prerequisites
        run: sudo apt-get install ninja-build gcc-arm-none-eabi

      - name: rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Run host-side crate tests
        run: laze build -DCARGO_ARGS+='--locked' --builders host --multiple-tasks --global --keep-going=0 test

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # "Obfuscate" the search query with concatenation so it does not self-trigger.
      - name: Check for leftover occurrences of the old project name
        run: set +e; grep -ri "riot"".rs" --line-number --exclude-dir=.git; test $? -eq 1

      # This word is relatively unlikely to be used in the project; if you have
      # a correct use for it (specifically referring to the GUI concept), it is
      # totally fine to remove this lint.
      - name: Check for occurrences of the word fold_er (without the underscore)
        run: set +e; grep -ri "fold""er" --line-number --exclude-dir=.git --exclude-dir=supply-chain; test $? -eq 1

      # This should be replaced with a Clippy lint when one exists.
      - name: Check for leftover occurrences of the `authors` key in manifests
        run: set +e; grep -r '^authors\s*=' --line-number src examples tests; test $? -eq 1

      - name: Forbid version keys in manifests of tests and examples
        run: set +e; grep -r '^version\s*=\|^version\.workspace' --line-number examples tests; test $? -eq 1

      # `find -exec` does not make it easy to fail with a non-zero code when the
      # `exec`ed command fails.
      - name: Check for missing `rust-version` keys in `ariel-os*` crates
        run: |
          find src -iwholename 'src/ariel-os*/Cargo.toml' -exec sh -c \
            'grep -q --with-filename 'rust-version' "$0" || (echo "$0 is missing a rust-version key"; kill $PPID)' \{\} \;

      - id: get_toolchain
        run: echo "toolchain=$(scripts/rust-toolchain.sh)" >> $GITHUB_OUTPUT

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.get_toolchain.outputs.toolchain }}
          # Required for checking ariel-os-esp and ariel-os-nrf
          targets: riscv32imac-unknown-none-elf, thumbv7em-none-eabi
          components: clippy, rustfmt

      - name: rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Install cargo-deny
        uses: taiki-e/install-action@e43a5023a747770bfcb71ae048541a681714b951 # v2
        with:
          tool: cargo-deny

      # Should run as soon as possible to avoid using unwanted crates
      # `--force`ing is required as the installed binary could have been
      # restored from cache.
      - name: cargo-deny
        run: cargo deny check bans licenses sources

      # Must run after the cargo-deny job as it requires the downloaded
      # cargo-deny binary.
      - name: cargo-deny advisories
        run: cargo deny check advisories
        # Prevent sudden announcement of a new advisory from failing CI
        continue-on-error: true

      # TODO: we'll eventually want to check the whole workspace with --workspace
      # TODO: we'll eventually want to check relevant feature combinations
      # TODO: we may want to use --no-deps as well
      - name: clippy
        uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5
        with:
          args: |
            --verbose
            --locked
            --features "
                ble,
                coap,
                csprng,
                defmt,
                dns,
                external-interrupts,
                hwrng,
                i2c,
                mdns,
                multicast,
                net,
                no-boards,
                sensors,
                spi,
                storage,
                tcp,
                uart,
                udp,
                usb,
                usb-ethernet,
                "
            -p ariel-os
            -p ariel-os-alloc
            -p ariel-os-boards
            -p ariel-os-coap
            -p ariel-os-debug
            -p ariel-os-debug-log
            -p ariel-os-embassy
            -p ariel-os-embassy-common
            -p ariel-os-hal
            -p ariel-os-identity
            -p ariel-os-macros
            -p ariel-os-power
            -p ariel-os-random
            -p ariel-os-rt
            -p ariel-os-sensors
            -p ariel-os-storage
            -p ariel-os-threads
            -p ariel-os-utils
            --
            --deny warnings

      - run: echo 'RUSTFLAGS=--cfg context="esp32c6" --cfg getrandom_backend="custom"' >> $GITHUB_ENV
      - name: clippy for ESP32
        uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5
        with:
          args: |
            --verbose
            --locked
            --target=riscv32imac-unknown-none-elf
            --features "
                esp-hal-embassy/esp32c6,
                esp-hal/esp32c6,
                external-interrupts,
                i2c,
                spi,
                uart,
                "
            -p ariel-os-esp
            --
            --deny warnings

      - run: echo 'RUSTFLAGS=--cfg context="cortex-m" --cfg context="rp" --cfg context="rp2040" --cfg getrandom_backend="custom"' >> $GITHUB_ENV
      - name: clippy for RP
        uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5
        with:
          args: |
            --verbose
            --locked
            --features "
                ble,
                ble-cyw43,
                embassy-rp/rp2040,
                external-interrupts,
                i2c,
                spi,
                uart,
                "
            -p ariel-os-rp
            --
            --deny warnings

      - run: echo 'RUSTFLAGS=--cfg context="nrf52840" --cfg context="nrf52" --cfg getrandom_backend="custom"' >> $GITHUB_ENV
      - name: clippy for nRF
        uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5
        with:
          args: |
            --verbose
            --locked
            --features "
                ble-central,
                ble-peripheral,
                embassy-nrf/nrf52840,
                external-interrupts,
                i2c,
                spi,
                uart,
                "
            -p ariel-os-nrf
            --target=thumbv7em-none-eabi
            --
            --deny warnings

      - run: echo 'RUSTFLAGS=--cfg context="stm32wb55rg" --cfg getrandom_backend="custom"' >> $GITHUB_ENV
      - name: clippy for STM32
        uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5
        with:
          args: |
            --verbose
            --locked
            --features "
                embassy-stm32/stm32wb55rg,
                external-interrupts,
                i2c,
                spi,
                uart,
                "
            -p ariel-os-stm32
            --
            --deny warnings

      # Reset `RUSTFLAGS`.
      - run: echo 'RUSTFLAGS=' >> $GITHUB_ENV
      - name: clippy
        uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5
        with:
          args: |
            --locked
            -p coapcore
            --
            --deny warnings

  lint-rustdoc:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - id: get_toolchain
        run: echo "toolchain=$(scripts/rust-toolchain.sh)" >> $GITHUB_OUTPUT

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.get_toolchain.outputs.toolchain }}
          targets: riscv32imac-unknown-none-elf
          components: rust-src

      - name: rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: rustdoc
        run: |
            RUSTDOCFLAGS='-D warnings' cargo doc \
                --no-deps \
                -p ariel-os \
                -p coapcore \
                --features "
                    bench,
                    ble,
                    coap,
                    core-affinity,
                    csprng,
                    defmt,
                    dns,
                    executor-thread,
                    external-interrupts,
                    hwrng,
                    i2c,
                    mdns,
                    multicast,
                    net,
                    no-boards,
                    random,
                    ariel-os-coap/doc,
                    sensors,
                    spi,
                    storage,
                    tcp,
                    threading,
                    uart,
                    udp,
                    usb,
                    usb-hid,
                    coapcore/_nightly_docs
                    "

      - name: rustdoc for ESP32
        run: |
            RUSTDOCFLAGS='-D warnings --cfg context="esp32c6"' cargo doc \
                --no-deps \
                --target=riscv32imac-unknown-none-elf \
                --features "
                    esp-hal-embassy/esp32c6,
                    esp-hal/esp32c6,
                    external-interrupts,
                    i2c,
                    spi,
                    uart,
                    " \
                -p ariel-os-esp

      - name: rustdoc for RP
        run: |
            RUSTDOCFLAGS='-D warnings --cfg context="rp" --cfg context="rp2040"' \
                cargo doc \
                --no-deps \
                --features "
                    embassy-rp/rp2040,
                    external-interrupts,
                    i2c,
                    spi,
                    uart,
                    " \
                -p ariel-os-rp

      - name: rustdoc for nRF
        run: |
            RUSTDOCFLAGS='-D warnings --cfg context="nrf52840"' cargo doc \
                --no-deps \
                --features "
                    embassy-nrf/nrf52840,
                    external-interrupts,
                    i2c,
                    spi,
                    uart,
                    " \
                -p ariel-os-nrf

      - name: rustdoc for STM32
        run: |
            RUSTDOCFLAGS='-D warnings --cfg context="stm32wb55rg"' cargo doc \
                --no-deps \
                --features "
                    embassy-stm32/stm32wb55rg,
                    external-interrupts,
                    i2c,
                    spi,
                    uart,
                    " \
                -p ariel-os-stm32

  lint-rustfmt:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: rustfmt
        run: cargo fmt --check --all -- --config format_generated_files=false

  lint-yamllint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: yamllint
        uses: karancode/yamllint-github-action@master
        with:
          yamllint_comment: true # Insert inline PR comments
          yamllint_strict: true # Set error code on warnings

  lint-taplo:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install taplo
        uses: taiki-e/install-action@e43a5023a747770bfcb71ae048541a681714b951 # v2
        with:
          tool: taplo
          fallback: none

      - name: Check toml formatting
        run: taplo fmt --check

  cargo-manifest-check:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install cargo-manifest-check
        uses: taiki-e/install-action@e43a5023a747770bfcb71ae048541a681714b951 # v2
        with:
          tool: cargo-manifest-check@0.2

      # For now, only run cargo-manifest-check on ariel-os-identity.
      - name: cargo-manifest-check
        run: cargo manifest-check src/ariel-os-identity

  lint-ruff:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Ruff
        uses: chartboost/ruff-action@e18ae971ccee1b2d7bbef113930f00c670b78da4 # v1
        with:
          args: format --check # Only check formatting for now

  lint-spell:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: typos
        uses: crate-ci/typos@80c8a4945eec0f6d464eaf9e65ed98ef085283d1 # v1.38.1

      - name: Check that the book summary has an up-to-date board list
        run: ./doc/gen_book.rs summary doc/support_matrix.yml book/src/SUMMARY.md --template-path book/templates/SUMMARY.md.tmpl --check

      - name: Check that the board pages are all up-to-date
        run: ./doc/gen_book.rs board-pages doc/support_matrix.yml book/src/boards/ --check --template-path book/templates/board-page.md.tmpl

      - name: Check that the support matrices are up-to-date
        run: |
          ./doc/gen_book.rs matrix doc/support_matrix.yml book/src/support_matrix_tier1.html --tier 1 --template-path book/templates/support-matrix.html.tmpl --check
          ./doc/gen_book.rs matrix doc/support_matrix.yml book/src/support_matrix_tier2.html --tier 2 --template-path book/templates/support-matrix.html.tmpl --check
          ./doc/gen_book.rs matrix doc/support_matrix.yml book/src/support_matrix_tier3.html --tier 3 --template-path book/templates/support-matrix.html.tmpl --check

      - name: Check that the board index page is up-to-date
        run: |
          ./doc/gen_book.rs board-index doc/support_matrix.yml book/src/boards/index.md --template-path book/templates/board-index.md.tmpl --check

      - name: Install mdbook
        uses: taiki-e/install-action@e43a5023a747770bfcb71ae048541a681714b951 # v2
        with:
          tool: mdbook@0.5.0-alpha.1

      - name: Build the book
        run: |
          cd book
          mdbook build

      - name: Link Checker
        uses: lycheeverse/lychee-action@885c65f3dc543b57c898c8099f4e08c8afd178a2 # v2
        with:
          args: --offline --require-https --no-progress --include-fragments --include-verbatim -v '*.md' book/book
          fail: true

  sbd-gen-check:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install sbd-gen
        uses: taiki-e/install-action@e43a5023a747770bfcb71ae048541a681714b951 # v2
        with:
          tool: sbd-gen@0.1.9

      - name: Check sbd-gen output
        run: |
          sbd-gen generate-ariel --mode check boards -o src/ariel-os-boards
